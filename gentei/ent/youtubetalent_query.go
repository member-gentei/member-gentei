// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/member-gentei/member-gentei/gentei/ent/guild"
	"github.com/member-gentei/member-gentei/gentei/ent/guildrole"
	"github.com/member-gentei/member-gentei/gentei/ent/predicate"
	"github.com/member-gentei/member-gentei/gentei/ent/usermembership"
	"github.com/member-gentei/member-gentei/gentei/ent/youtubetalent"
)

// YouTubeTalentQuery is the builder for querying YouTubeTalent entities.
type YouTubeTalentQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.YouTubeTalent
	// eager-loading edges.
	withGuilds      *GuildQuery
	withRoles       *GuildRoleQuery
	withMemberships *UserMembershipQuery
	modifiers       []func(s *sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the YouTubeTalentQuery builder.
func (yttq *YouTubeTalentQuery) Where(ps ...predicate.YouTubeTalent) *YouTubeTalentQuery {
	yttq.predicates = append(yttq.predicates, ps...)
	return yttq
}

// Limit adds a limit step to the query.
func (yttq *YouTubeTalentQuery) Limit(limit int) *YouTubeTalentQuery {
	yttq.limit = &limit
	return yttq
}

// Offset adds an offset step to the query.
func (yttq *YouTubeTalentQuery) Offset(offset int) *YouTubeTalentQuery {
	yttq.offset = &offset
	return yttq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (yttq *YouTubeTalentQuery) Unique(unique bool) *YouTubeTalentQuery {
	yttq.unique = &unique
	return yttq
}

// Order adds an order step to the query.
func (yttq *YouTubeTalentQuery) Order(o ...OrderFunc) *YouTubeTalentQuery {
	yttq.order = append(yttq.order, o...)
	return yttq
}

// QueryGuilds chains the current query on the "guilds" edge.
func (yttq *YouTubeTalentQuery) QueryGuilds() *GuildQuery {
	query := &GuildQuery{config: yttq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := yttq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := yttq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(youtubetalent.Table, youtubetalent.FieldID, selector),
			sqlgraph.To(guild.Table, guild.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, youtubetalent.GuildsTable, youtubetalent.GuildsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(yttq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRoles chains the current query on the "roles" edge.
func (yttq *YouTubeTalentQuery) QueryRoles() *GuildRoleQuery {
	query := &GuildRoleQuery{config: yttq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := yttq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := yttq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(youtubetalent.Table, youtubetalent.FieldID, selector),
			sqlgraph.To(guildrole.Table, guildrole.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, youtubetalent.RolesTable, youtubetalent.RolesColumn),
		)
		fromU = sqlgraph.SetNeighbors(yttq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMemberships chains the current query on the "memberships" edge.
func (yttq *YouTubeTalentQuery) QueryMemberships() *UserMembershipQuery {
	query := &UserMembershipQuery{config: yttq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := yttq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := yttq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(youtubetalent.Table, youtubetalent.FieldID, selector),
			sqlgraph.To(usermembership.Table, usermembership.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, youtubetalent.MembershipsTable, youtubetalent.MembershipsColumn),
		)
		fromU = sqlgraph.SetNeighbors(yttq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first YouTubeTalent entity from the query.
// Returns a *NotFoundError when no YouTubeTalent was found.
func (yttq *YouTubeTalentQuery) First(ctx context.Context) (*YouTubeTalent, error) {
	nodes, err := yttq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{youtubetalent.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (yttq *YouTubeTalentQuery) FirstX(ctx context.Context) *YouTubeTalent {
	node, err := yttq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first YouTubeTalent ID from the query.
// Returns a *NotFoundError when no YouTubeTalent ID was found.
func (yttq *YouTubeTalentQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = yttq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{youtubetalent.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (yttq *YouTubeTalentQuery) FirstIDX(ctx context.Context) string {
	id, err := yttq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single YouTubeTalent entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one YouTubeTalent entity is not found.
// Returns a *NotFoundError when no YouTubeTalent entities are found.
func (yttq *YouTubeTalentQuery) Only(ctx context.Context) (*YouTubeTalent, error) {
	nodes, err := yttq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{youtubetalent.Label}
	default:
		return nil, &NotSingularError{youtubetalent.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (yttq *YouTubeTalentQuery) OnlyX(ctx context.Context) *YouTubeTalent {
	node, err := yttq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only YouTubeTalent ID in the query.
// Returns a *NotSingularError when exactly one YouTubeTalent ID is not found.
// Returns a *NotFoundError when no entities are found.
func (yttq *YouTubeTalentQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = yttq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{youtubetalent.Label}
	default:
		err = &NotSingularError{youtubetalent.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (yttq *YouTubeTalentQuery) OnlyIDX(ctx context.Context) string {
	id, err := yttq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of YouTubeTalents.
func (yttq *YouTubeTalentQuery) All(ctx context.Context) ([]*YouTubeTalent, error) {
	if err := yttq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return yttq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (yttq *YouTubeTalentQuery) AllX(ctx context.Context) []*YouTubeTalent {
	nodes, err := yttq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of YouTubeTalent IDs.
func (yttq *YouTubeTalentQuery) IDs(ctx context.Context) ([]string, error) {
	var ids []string
	if err := yttq.Select(youtubetalent.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (yttq *YouTubeTalentQuery) IDsX(ctx context.Context) []string {
	ids, err := yttq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (yttq *YouTubeTalentQuery) Count(ctx context.Context) (int, error) {
	if err := yttq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return yttq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (yttq *YouTubeTalentQuery) CountX(ctx context.Context) int {
	count, err := yttq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (yttq *YouTubeTalentQuery) Exist(ctx context.Context) (bool, error) {
	if err := yttq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return yttq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (yttq *YouTubeTalentQuery) ExistX(ctx context.Context) bool {
	exist, err := yttq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the YouTubeTalentQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (yttq *YouTubeTalentQuery) Clone() *YouTubeTalentQuery {
	if yttq == nil {
		return nil
	}
	return &YouTubeTalentQuery{
		config:          yttq.config,
		limit:           yttq.limit,
		offset:          yttq.offset,
		order:           append([]OrderFunc{}, yttq.order...),
		predicates:      append([]predicate.YouTubeTalent{}, yttq.predicates...),
		withGuilds:      yttq.withGuilds.Clone(),
		withRoles:       yttq.withRoles.Clone(),
		withMemberships: yttq.withMemberships.Clone(),
		// clone intermediate query.
		sql:  yttq.sql.Clone(),
		path: yttq.path,
	}
}

// WithGuilds tells the query-builder to eager-load the nodes that are connected to
// the "guilds" edge. The optional arguments are used to configure the query builder of the edge.
func (yttq *YouTubeTalentQuery) WithGuilds(opts ...func(*GuildQuery)) *YouTubeTalentQuery {
	query := &GuildQuery{config: yttq.config}
	for _, opt := range opts {
		opt(query)
	}
	yttq.withGuilds = query
	return yttq
}

// WithRoles tells the query-builder to eager-load the nodes that are connected to
// the "roles" edge. The optional arguments are used to configure the query builder of the edge.
func (yttq *YouTubeTalentQuery) WithRoles(opts ...func(*GuildRoleQuery)) *YouTubeTalentQuery {
	query := &GuildRoleQuery{config: yttq.config}
	for _, opt := range opts {
		opt(query)
	}
	yttq.withRoles = query
	return yttq
}

// WithMemberships tells the query-builder to eager-load the nodes that are connected to
// the "memberships" edge. The optional arguments are used to configure the query builder of the edge.
func (yttq *YouTubeTalentQuery) WithMemberships(opts ...func(*UserMembershipQuery)) *YouTubeTalentQuery {
	query := &UserMembershipQuery{config: yttq.config}
	for _, opt := range opts {
		opt(query)
	}
	yttq.withMemberships = query
	return yttq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		ChannelName string `json:"channel_name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.YouTubeTalent.Query().
//		GroupBy(youtubetalent.FieldChannelName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (yttq *YouTubeTalentQuery) GroupBy(field string, fields ...string) *YouTubeTalentGroupBy {
	group := &YouTubeTalentGroupBy{config: yttq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := yttq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return yttq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		ChannelName string `json:"channel_name,omitempty"`
//	}
//
//	client.YouTubeTalent.Query().
//		Select(youtubetalent.FieldChannelName).
//		Scan(ctx, &v)
//
func (yttq *YouTubeTalentQuery) Select(fields ...string) *YouTubeTalentSelect {
	yttq.fields = append(yttq.fields, fields...)
	return &YouTubeTalentSelect{YouTubeTalentQuery: yttq}
}

func (yttq *YouTubeTalentQuery) prepareQuery(ctx context.Context) error {
	for _, f := range yttq.fields {
		if !youtubetalent.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if yttq.path != nil {
		prev, err := yttq.path(ctx)
		if err != nil {
			return err
		}
		yttq.sql = prev
	}
	return nil
}

func (yttq *YouTubeTalentQuery) sqlAll(ctx context.Context) ([]*YouTubeTalent, error) {
	var (
		nodes       = []*YouTubeTalent{}
		_spec       = yttq.querySpec()
		loadedTypes = [3]bool{
			yttq.withGuilds != nil,
			yttq.withRoles != nil,
			yttq.withMemberships != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &YouTubeTalent{config: yttq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(yttq.modifiers) > 0 {
		_spec.Modifiers = yttq.modifiers
	}
	if err := sqlgraph.QueryNodes(ctx, yttq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := yttq.withGuilds; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		ids := make(map[string]*YouTubeTalent, len(nodes))
		for _, node := range nodes {
			ids[node.ID] = node
			fks = append(fks, node.ID)
			node.Edges.Guilds = []*Guild{}
		}
		var (
			edgeids []uint64
			edges   = make(map[uint64][]*YouTubeTalent)
		)
		_spec := &sqlgraph.EdgeQuerySpec{
			Edge: &sqlgraph.EdgeSpec{
				Inverse: false,
				Table:   youtubetalent.GuildsTable,
				Columns: youtubetalent.GuildsPrimaryKey,
			},
			Predicate: func(s *sql.Selector) {
				s.Where(sql.InValues(youtubetalent.GuildsPrimaryKey[0], fks...))
			},
			ScanValues: func() [2]interface{} {
				return [2]interface{}{new(sql.NullString), new(sql.NullInt64)}
			},
			Assign: func(out, in interface{}) error {
				eout, ok := out.(*sql.NullString)
				if !ok || eout == nil {
					return fmt.Errorf("unexpected id value for edge-out")
				}
				ein, ok := in.(*sql.NullInt64)
				if !ok || ein == nil {
					return fmt.Errorf("unexpected id value for edge-in")
				}
				outValue := eout.String
				inValue := uint64(ein.Int64)
				node, ok := ids[outValue]
				if !ok {
					return fmt.Errorf("unexpected node id in edges: %v", outValue)
				}
				if _, ok := edges[inValue]; !ok {
					edgeids = append(edgeids, inValue)
				}
				edges[inValue] = append(edges[inValue], node)
				return nil
			},
		}
		if err := sqlgraph.QueryEdges(ctx, yttq.driver, _spec); err != nil {
			return nil, fmt.Errorf(`query edges "guilds": %w`, err)
		}
		query.Where(guild.IDIn(edgeids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := edges[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected "guilds" node returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Guilds = append(nodes[i].Edges.Guilds, n)
			}
		}
	}

	if query := yttq.withRoles; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[string]*YouTubeTalent)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.Roles = []*GuildRole{}
		}
		query.withFKs = true
		query.Where(predicate.GuildRole(func(s *sql.Selector) {
			s.Where(sql.InValues(youtubetalent.RolesColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.you_tube_talent_roles
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "you_tube_talent_roles" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "you_tube_talent_roles" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.Roles = append(node.Edges.Roles, n)
		}
	}

	if query := yttq.withMemberships; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[string]*YouTubeTalent)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.Memberships = []*UserMembership{}
		}
		query.withFKs = true
		query.Where(predicate.UserMembership(func(s *sql.Selector) {
			s.Where(sql.InValues(youtubetalent.MembershipsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.user_membership_youtube_talent
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "user_membership_youtube_talent" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "user_membership_youtube_talent" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.Memberships = append(node.Edges.Memberships, n)
		}
	}

	return nodes, nil
}

func (yttq *YouTubeTalentQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := yttq.querySpec()
	if len(yttq.modifiers) > 0 {
		_spec.Modifiers = yttq.modifiers
	}
	_spec.Node.Columns = yttq.fields
	if len(yttq.fields) > 0 {
		_spec.Unique = yttq.unique != nil && *yttq.unique
	}
	return sqlgraph.CountNodes(ctx, yttq.driver, _spec)
}

func (yttq *YouTubeTalentQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := yttq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (yttq *YouTubeTalentQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   youtubetalent.Table,
			Columns: youtubetalent.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: youtubetalent.FieldID,
			},
		},
		From:   yttq.sql,
		Unique: true,
	}
	if unique := yttq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := yttq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, youtubetalent.FieldID)
		for i := range fields {
			if fields[i] != youtubetalent.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := yttq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := yttq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := yttq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := yttq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (yttq *YouTubeTalentQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(yttq.driver.Dialect())
	t1 := builder.Table(youtubetalent.Table)
	columns := yttq.fields
	if len(columns) == 0 {
		columns = youtubetalent.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if yttq.sql != nil {
		selector = yttq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if yttq.unique != nil && *yttq.unique {
		selector.Distinct()
	}
	for _, m := range yttq.modifiers {
		m(selector)
	}
	for _, p := range yttq.predicates {
		p(selector)
	}
	for _, p := range yttq.order {
		p(selector)
	}
	if offset := yttq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := yttq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ForUpdate locks the selected rows against concurrent updates, and prevent them from being
// updated, deleted or "selected ... for update" by other sessions, until the transaction is
// either committed or rolled-back.
func (yttq *YouTubeTalentQuery) ForUpdate(opts ...sql.LockOption) *YouTubeTalentQuery {
	if yttq.driver.Dialect() == dialect.Postgres {
		yttq.Unique(false)
	}
	yttq.modifiers = append(yttq.modifiers, func(s *sql.Selector) {
		s.ForUpdate(opts...)
	})
	return yttq
}

// ForShare behaves similarly to ForUpdate, except that it acquires a shared mode lock
// on any rows that are read. Other sessions can read the rows, but cannot modify them
// until your transaction commits.
func (yttq *YouTubeTalentQuery) ForShare(opts ...sql.LockOption) *YouTubeTalentQuery {
	if yttq.driver.Dialect() == dialect.Postgres {
		yttq.Unique(false)
	}
	yttq.modifiers = append(yttq.modifiers, func(s *sql.Selector) {
		s.ForShare(opts...)
	})
	return yttq
}

// YouTubeTalentGroupBy is the group-by builder for YouTubeTalent entities.
type YouTubeTalentGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (yttgb *YouTubeTalentGroupBy) Aggregate(fns ...AggregateFunc) *YouTubeTalentGroupBy {
	yttgb.fns = append(yttgb.fns, fns...)
	return yttgb
}

// Scan applies the group-by query and scans the result into the given value.
func (yttgb *YouTubeTalentGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := yttgb.path(ctx)
	if err != nil {
		return err
	}
	yttgb.sql = query
	return yttgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (yttgb *YouTubeTalentGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := yttgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (yttgb *YouTubeTalentGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(yttgb.fields) > 1 {
		return nil, errors.New("ent: YouTubeTalentGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := yttgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (yttgb *YouTubeTalentGroupBy) StringsX(ctx context.Context) []string {
	v, err := yttgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (yttgb *YouTubeTalentGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = yttgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{youtubetalent.Label}
	default:
		err = fmt.Errorf("ent: YouTubeTalentGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (yttgb *YouTubeTalentGroupBy) StringX(ctx context.Context) string {
	v, err := yttgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (yttgb *YouTubeTalentGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(yttgb.fields) > 1 {
		return nil, errors.New("ent: YouTubeTalentGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := yttgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (yttgb *YouTubeTalentGroupBy) IntsX(ctx context.Context) []int {
	v, err := yttgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (yttgb *YouTubeTalentGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = yttgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{youtubetalent.Label}
	default:
		err = fmt.Errorf("ent: YouTubeTalentGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (yttgb *YouTubeTalentGroupBy) IntX(ctx context.Context) int {
	v, err := yttgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (yttgb *YouTubeTalentGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(yttgb.fields) > 1 {
		return nil, errors.New("ent: YouTubeTalentGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := yttgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (yttgb *YouTubeTalentGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := yttgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (yttgb *YouTubeTalentGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = yttgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{youtubetalent.Label}
	default:
		err = fmt.Errorf("ent: YouTubeTalentGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (yttgb *YouTubeTalentGroupBy) Float64X(ctx context.Context) float64 {
	v, err := yttgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (yttgb *YouTubeTalentGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(yttgb.fields) > 1 {
		return nil, errors.New("ent: YouTubeTalentGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := yttgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (yttgb *YouTubeTalentGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := yttgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (yttgb *YouTubeTalentGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = yttgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{youtubetalent.Label}
	default:
		err = fmt.Errorf("ent: YouTubeTalentGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (yttgb *YouTubeTalentGroupBy) BoolX(ctx context.Context) bool {
	v, err := yttgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (yttgb *YouTubeTalentGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range yttgb.fields {
		if !youtubetalent.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := yttgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := yttgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (yttgb *YouTubeTalentGroupBy) sqlQuery() *sql.Selector {
	selector := yttgb.sql.Select()
	aggregation := make([]string, 0, len(yttgb.fns))
	for _, fn := range yttgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(yttgb.fields)+len(yttgb.fns))
		for _, f := range yttgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(yttgb.fields...)...)
}

// YouTubeTalentSelect is the builder for selecting fields of YouTubeTalent entities.
type YouTubeTalentSelect struct {
	*YouTubeTalentQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (ytts *YouTubeTalentSelect) Scan(ctx context.Context, v interface{}) error {
	if err := ytts.prepareQuery(ctx); err != nil {
		return err
	}
	ytts.sql = ytts.YouTubeTalentQuery.sqlQuery(ctx)
	return ytts.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (ytts *YouTubeTalentSelect) ScanX(ctx context.Context, v interface{}) {
	if err := ytts.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (ytts *YouTubeTalentSelect) Strings(ctx context.Context) ([]string, error) {
	if len(ytts.fields) > 1 {
		return nil, errors.New("ent: YouTubeTalentSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := ytts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (ytts *YouTubeTalentSelect) StringsX(ctx context.Context) []string {
	v, err := ytts.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (ytts *YouTubeTalentSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = ytts.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{youtubetalent.Label}
	default:
		err = fmt.Errorf("ent: YouTubeTalentSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (ytts *YouTubeTalentSelect) StringX(ctx context.Context) string {
	v, err := ytts.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (ytts *YouTubeTalentSelect) Ints(ctx context.Context) ([]int, error) {
	if len(ytts.fields) > 1 {
		return nil, errors.New("ent: YouTubeTalentSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := ytts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (ytts *YouTubeTalentSelect) IntsX(ctx context.Context) []int {
	v, err := ytts.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (ytts *YouTubeTalentSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = ytts.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{youtubetalent.Label}
	default:
		err = fmt.Errorf("ent: YouTubeTalentSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (ytts *YouTubeTalentSelect) IntX(ctx context.Context) int {
	v, err := ytts.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (ytts *YouTubeTalentSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(ytts.fields) > 1 {
		return nil, errors.New("ent: YouTubeTalentSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := ytts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (ytts *YouTubeTalentSelect) Float64sX(ctx context.Context) []float64 {
	v, err := ytts.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (ytts *YouTubeTalentSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = ytts.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{youtubetalent.Label}
	default:
		err = fmt.Errorf("ent: YouTubeTalentSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (ytts *YouTubeTalentSelect) Float64X(ctx context.Context) float64 {
	v, err := ytts.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (ytts *YouTubeTalentSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(ytts.fields) > 1 {
		return nil, errors.New("ent: YouTubeTalentSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := ytts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (ytts *YouTubeTalentSelect) BoolsX(ctx context.Context) []bool {
	v, err := ytts.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (ytts *YouTubeTalentSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = ytts.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{youtubetalent.Label}
	default:
		err = fmt.Errorf("ent: YouTubeTalentSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (ytts *YouTubeTalentSelect) BoolX(ctx context.Context) bool {
	v, err := ytts.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ytts *YouTubeTalentSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := ytts.sql.Query()
	if err := ytts.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
