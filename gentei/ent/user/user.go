// Code generated by entc, DO NOT EDIT.

package user

import (
	"time"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldFullName holds the string denoting the full_name field in the database.
	FieldFullName = "full_name"
	// FieldAvatarHash holds the string denoting the avatar_hash field in the database.
	FieldAvatarHash = "avatar_hash"
	// FieldLastCheck holds the string denoting the last_check field in the database.
	FieldLastCheck = "last_check"
	// FieldYoutubeID holds the string denoting the youtube_id field in the database.
	FieldYoutubeID = "youtube_id"
	// FieldYoutubeToken holds the string denoting the youtube_token field in the database.
	FieldYoutubeToken = "youtube_token"
	// FieldDiscordToken holds the string denoting the discord_token field in the database.
	FieldDiscordToken = "discord_token"
	// FieldMembershipMetadata holds the string denoting the membership_metadata field in the database.
	FieldMembershipMetadata = "membership_metadata"
	// EdgeGuilds holds the string denoting the guilds edge name in mutations.
	EdgeGuilds = "guilds"
	// EdgeGuildsAdmin holds the string denoting the guilds_admin edge name in mutations.
	EdgeGuildsAdmin = "guilds_admin"
	// EdgeRoles holds the string denoting the roles edge name in mutations.
	EdgeRoles = "roles"
	// EdgeYoutubeMemberships holds the string denoting the youtube_memberships edge name in mutations.
	EdgeYoutubeMemberships = "youtube_memberships"
	// Table holds the table name of the user in the database.
	Table = "users"
	// GuildsTable is the table that holds the guilds relation/edge. The primary key declared below.
	GuildsTable = "guild_members"
	// GuildsInverseTable is the table name for the Guild entity.
	// It exists in this package in order to avoid circular dependency with the "guild" package.
	GuildsInverseTable = "guilds"
	// GuildsAdminTable is the table that holds the guilds_admin relation/edge. The primary key declared below.
	GuildsAdminTable = "guild_admins"
	// GuildsAdminInverseTable is the table name for the Guild entity.
	// It exists in this package in order to avoid circular dependency with the "guild" package.
	GuildsAdminInverseTable = "guilds"
	// RolesTable is the table that holds the roles relation/edge. The primary key declared below.
	RolesTable = "user_roles"
	// RolesInverseTable is the table name for the GuildRole entity.
	// It exists in this package in order to avoid circular dependency with the "guildrole" package.
	RolesInverseTable = "guild_roles"
	// YoutubeMembershipsTable is the table that holds the youtube_memberships relation/edge. The primary key declared below.
	YoutubeMembershipsTable = "user_youtube_memberships"
	// YoutubeMembershipsInverseTable is the table name for the YouTubeTalent entity.
	// It exists in this package in order to avoid circular dependency with the "youtubetalent" package.
	YoutubeMembershipsInverseTable = "you_tube_talents"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldFullName,
	FieldAvatarHash,
	FieldLastCheck,
	FieldYoutubeID,
	FieldYoutubeToken,
	FieldDiscordToken,
	FieldMembershipMetadata,
}

var (
	// GuildsPrimaryKey and GuildsColumn2 are the table columns denoting the
	// primary key for the guilds relation (M2M).
	GuildsPrimaryKey = []string{"guild_id", "user_id"}
	// GuildsAdminPrimaryKey and GuildsAdminColumn2 are the table columns denoting the
	// primary key for the guilds_admin relation (M2M).
	GuildsAdminPrimaryKey = []string{"guild_id", "user_id"}
	// RolesPrimaryKey and RolesColumn2 are the table columns denoting the
	// primary key for the roles relation (M2M).
	RolesPrimaryKey = []string{"user_id", "guild_role_id"}
	// YoutubeMembershipsPrimaryKey and YoutubeMembershipsColumn2 are the table columns denoting the
	// primary key for the youtube_memberships relation (M2M).
	YoutubeMembershipsPrimaryKey = []string{"user_id", "you_tube_talent_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// FullNameValidator is a validator for the "full_name" field. It is called by the builders before save.
	FullNameValidator func(string) error
	// DefaultLastCheck holds the default value on creation for the "last_check" field.
	DefaultLastCheck func() time.Time
)
