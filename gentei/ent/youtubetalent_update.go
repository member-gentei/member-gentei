// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/member-gentei/member-gentei/gentei/ent/guild"
	"github.com/member-gentei/member-gentei/gentei/ent/predicate"
	"github.com/member-gentei/member-gentei/gentei/ent/user"
	"github.com/member-gentei/member-gentei/gentei/ent/youtubetalent"
)

// YouTubeTalentUpdate is the builder for updating YouTubeTalent entities.
type YouTubeTalentUpdate struct {
	config
	hooks    []Hook
	mutation *YouTubeTalentMutation
}

// Where appends a list predicates to the YouTubeTalentUpdate builder.
func (yttu *YouTubeTalentUpdate) Where(ps ...predicate.YouTubeTalent) *YouTubeTalentUpdate {
	yttu.mutation.Where(ps...)
	return yttu
}

// SetChannelName sets the "channel_name" field.
func (yttu *YouTubeTalentUpdate) SetChannelName(s string) *YouTubeTalentUpdate {
	yttu.mutation.SetChannelName(s)
	return yttu
}

// SetThumbnailURL sets the "thumbnail_url" field.
func (yttu *YouTubeTalentUpdate) SetThumbnailURL(s string) *YouTubeTalentUpdate {
	yttu.mutation.SetThumbnailURL(s)
	return yttu
}

// SetMembershipVideoID sets the "membership_video_id" field.
func (yttu *YouTubeTalentUpdate) SetMembershipVideoID(s string) *YouTubeTalentUpdate {
	yttu.mutation.SetMembershipVideoID(s)
	return yttu
}

// SetNillableMembershipVideoID sets the "membership_video_id" field if the given value is not nil.
func (yttu *YouTubeTalentUpdate) SetNillableMembershipVideoID(s *string) *YouTubeTalentUpdate {
	if s != nil {
		yttu.SetMembershipVideoID(*s)
	}
	return yttu
}

// ClearMembershipVideoID clears the value of the "membership_video_id" field.
func (yttu *YouTubeTalentUpdate) ClearMembershipVideoID() *YouTubeTalentUpdate {
	yttu.mutation.ClearMembershipVideoID()
	return yttu
}

// SetLastMembershipVideoIDMiss sets the "last_membership_video_id_miss" field.
func (yttu *YouTubeTalentUpdate) SetLastMembershipVideoIDMiss(t time.Time) *YouTubeTalentUpdate {
	yttu.mutation.SetLastMembershipVideoIDMiss(t)
	return yttu
}

// SetNillableLastMembershipVideoIDMiss sets the "last_membership_video_id_miss" field if the given value is not nil.
func (yttu *YouTubeTalentUpdate) SetNillableLastMembershipVideoIDMiss(t *time.Time) *YouTubeTalentUpdate {
	if t != nil {
		yttu.SetLastMembershipVideoIDMiss(*t)
	}
	return yttu
}

// ClearLastMembershipVideoIDMiss clears the value of the "last_membership_video_id_miss" field.
func (yttu *YouTubeTalentUpdate) ClearLastMembershipVideoIDMiss() *YouTubeTalentUpdate {
	yttu.mutation.ClearLastMembershipVideoIDMiss()
	return yttu
}

// SetLastUpdated sets the "last_updated" field.
func (yttu *YouTubeTalentUpdate) SetLastUpdated(t time.Time) *YouTubeTalentUpdate {
	yttu.mutation.SetLastUpdated(t)
	return yttu
}

// SetNillableLastUpdated sets the "last_updated" field if the given value is not nil.
func (yttu *YouTubeTalentUpdate) SetNillableLastUpdated(t *time.Time) *YouTubeTalentUpdate {
	if t != nil {
		yttu.SetLastUpdated(*t)
	}
	return yttu
}

// AddGuildIDs adds the "guilds" edge to the Guild entity by IDs.
func (yttu *YouTubeTalentUpdate) AddGuildIDs(ids ...uint64) *YouTubeTalentUpdate {
	yttu.mutation.AddGuildIDs(ids...)
	return yttu
}

// AddGuilds adds the "guilds" edges to the Guild entity.
func (yttu *YouTubeTalentUpdate) AddGuilds(g ...*Guild) *YouTubeTalentUpdate {
	ids := make([]uint64, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return yttu.AddGuildIDs(ids...)
}

// AddMemberIDs adds the "members" edge to the User entity by IDs.
func (yttu *YouTubeTalentUpdate) AddMemberIDs(ids ...uint64) *YouTubeTalentUpdate {
	yttu.mutation.AddMemberIDs(ids...)
	return yttu
}

// AddMembers adds the "members" edges to the User entity.
func (yttu *YouTubeTalentUpdate) AddMembers(u ...*User) *YouTubeTalentUpdate {
	ids := make([]uint64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return yttu.AddMemberIDs(ids...)
}

// Mutation returns the YouTubeTalentMutation object of the builder.
func (yttu *YouTubeTalentUpdate) Mutation() *YouTubeTalentMutation {
	return yttu.mutation
}

// ClearGuilds clears all "guilds" edges to the Guild entity.
func (yttu *YouTubeTalentUpdate) ClearGuilds() *YouTubeTalentUpdate {
	yttu.mutation.ClearGuilds()
	return yttu
}

// RemoveGuildIDs removes the "guilds" edge to Guild entities by IDs.
func (yttu *YouTubeTalentUpdate) RemoveGuildIDs(ids ...uint64) *YouTubeTalentUpdate {
	yttu.mutation.RemoveGuildIDs(ids...)
	return yttu
}

// RemoveGuilds removes "guilds" edges to Guild entities.
func (yttu *YouTubeTalentUpdate) RemoveGuilds(g ...*Guild) *YouTubeTalentUpdate {
	ids := make([]uint64, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return yttu.RemoveGuildIDs(ids...)
}

// ClearMembers clears all "members" edges to the User entity.
func (yttu *YouTubeTalentUpdate) ClearMembers() *YouTubeTalentUpdate {
	yttu.mutation.ClearMembers()
	return yttu
}

// RemoveMemberIDs removes the "members" edge to User entities by IDs.
func (yttu *YouTubeTalentUpdate) RemoveMemberIDs(ids ...uint64) *YouTubeTalentUpdate {
	yttu.mutation.RemoveMemberIDs(ids...)
	return yttu
}

// RemoveMembers removes "members" edges to User entities.
func (yttu *YouTubeTalentUpdate) RemoveMembers(u ...*User) *YouTubeTalentUpdate {
	ids := make([]uint64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return yttu.RemoveMemberIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (yttu *YouTubeTalentUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(yttu.hooks) == 0 {
		affected, err = yttu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*YouTubeTalentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			yttu.mutation = mutation
			affected, err = yttu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(yttu.hooks) - 1; i >= 0; i-- {
			if yttu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = yttu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, yttu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (yttu *YouTubeTalentUpdate) SaveX(ctx context.Context) int {
	affected, err := yttu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (yttu *YouTubeTalentUpdate) Exec(ctx context.Context) error {
	_, err := yttu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (yttu *YouTubeTalentUpdate) ExecX(ctx context.Context) {
	if err := yttu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (yttu *YouTubeTalentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   youtubetalent.Table,
			Columns: youtubetalent.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: youtubetalent.FieldID,
			},
		},
	}
	if ps := yttu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := yttu.mutation.ChannelName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: youtubetalent.FieldChannelName,
		})
	}
	if value, ok := yttu.mutation.ThumbnailURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: youtubetalent.FieldThumbnailURL,
		})
	}
	if value, ok := yttu.mutation.MembershipVideoID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: youtubetalent.FieldMembershipVideoID,
		})
	}
	if yttu.mutation.MembershipVideoIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: youtubetalent.FieldMembershipVideoID,
		})
	}
	if value, ok := yttu.mutation.LastMembershipVideoIDMiss(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: youtubetalent.FieldLastMembershipVideoIDMiss,
		})
	}
	if yttu.mutation.LastMembershipVideoIDMissCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: youtubetalent.FieldLastMembershipVideoIDMiss,
		})
	}
	if value, ok := yttu.mutation.LastUpdated(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: youtubetalent.FieldLastUpdated,
		})
	}
	if yttu.mutation.GuildsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   youtubetalent.GuildsTable,
			Columns: youtubetalent.GuildsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: guild.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := yttu.mutation.RemovedGuildsIDs(); len(nodes) > 0 && !yttu.mutation.GuildsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   youtubetalent.GuildsTable,
			Columns: youtubetalent.GuildsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: guild.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := yttu.mutation.GuildsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   youtubetalent.GuildsTable,
			Columns: youtubetalent.GuildsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: guild.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if yttu.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   youtubetalent.MembersTable,
			Columns: youtubetalent.MembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := yttu.mutation.RemovedMembersIDs(); len(nodes) > 0 && !yttu.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   youtubetalent.MembersTable,
			Columns: youtubetalent.MembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := yttu.mutation.MembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   youtubetalent.MembersTable,
			Columns: youtubetalent.MembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, yttu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{youtubetalent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// YouTubeTalentUpdateOne is the builder for updating a single YouTubeTalent entity.
type YouTubeTalentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *YouTubeTalentMutation
}

// SetChannelName sets the "channel_name" field.
func (yttuo *YouTubeTalentUpdateOne) SetChannelName(s string) *YouTubeTalentUpdateOne {
	yttuo.mutation.SetChannelName(s)
	return yttuo
}

// SetThumbnailURL sets the "thumbnail_url" field.
func (yttuo *YouTubeTalentUpdateOne) SetThumbnailURL(s string) *YouTubeTalentUpdateOne {
	yttuo.mutation.SetThumbnailURL(s)
	return yttuo
}

// SetMembershipVideoID sets the "membership_video_id" field.
func (yttuo *YouTubeTalentUpdateOne) SetMembershipVideoID(s string) *YouTubeTalentUpdateOne {
	yttuo.mutation.SetMembershipVideoID(s)
	return yttuo
}

// SetNillableMembershipVideoID sets the "membership_video_id" field if the given value is not nil.
func (yttuo *YouTubeTalentUpdateOne) SetNillableMembershipVideoID(s *string) *YouTubeTalentUpdateOne {
	if s != nil {
		yttuo.SetMembershipVideoID(*s)
	}
	return yttuo
}

// ClearMembershipVideoID clears the value of the "membership_video_id" field.
func (yttuo *YouTubeTalentUpdateOne) ClearMembershipVideoID() *YouTubeTalentUpdateOne {
	yttuo.mutation.ClearMembershipVideoID()
	return yttuo
}

// SetLastMembershipVideoIDMiss sets the "last_membership_video_id_miss" field.
func (yttuo *YouTubeTalentUpdateOne) SetLastMembershipVideoIDMiss(t time.Time) *YouTubeTalentUpdateOne {
	yttuo.mutation.SetLastMembershipVideoIDMiss(t)
	return yttuo
}

// SetNillableLastMembershipVideoIDMiss sets the "last_membership_video_id_miss" field if the given value is not nil.
func (yttuo *YouTubeTalentUpdateOne) SetNillableLastMembershipVideoIDMiss(t *time.Time) *YouTubeTalentUpdateOne {
	if t != nil {
		yttuo.SetLastMembershipVideoIDMiss(*t)
	}
	return yttuo
}

// ClearLastMembershipVideoIDMiss clears the value of the "last_membership_video_id_miss" field.
func (yttuo *YouTubeTalentUpdateOne) ClearLastMembershipVideoIDMiss() *YouTubeTalentUpdateOne {
	yttuo.mutation.ClearLastMembershipVideoIDMiss()
	return yttuo
}

// SetLastUpdated sets the "last_updated" field.
func (yttuo *YouTubeTalentUpdateOne) SetLastUpdated(t time.Time) *YouTubeTalentUpdateOne {
	yttuo.mutation.SetLastUpdated(t)
	return yttuo
}

// SetNillableLastUpdated sets the "last_updated" field if the given value is not nil.
func (yttuo *YouTubeTalentUpdateOne) SetNillableLastUpdated(t *time.Time) *YouTubeTalentUpdateOne {
	if t != nil {
		yttuo.SetLastUpdated(*t)
	}
	return yttuo
}

// AddGuildIDs adds the "guilds" edge to the Guild entity by IDs.
func (yttuo *YouTubeTalentUpdateOne) AddGuildIDs(ids ...uint64) *YouTubeTalentUpdateOne {
	yttuo.mutation.AddGuildIDs(ids...)
	return yttuo
}

// AddGuilds adds the "guilds" edges to the Guild entity.
func (yttuo *YouTubeTalentUpdateOne) AddGuilds(g ...*Guild) *YouTubeTalentUpdateOne {
	ids := make([]uint64, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return yttuo.AddGuildIDs(ids...)
}

// AddMemberIDs adds the "members" edge to the User entity by IDs.
func (yttuo *YouTubeTalentUpdateOne) AddMemberIDs(ids ...uint64) *YouTubeTalentUpdateOne {
	yttuo.mutation.AddMemberIDs(ids...)
	return yttuo
}

// AddMembers adds the "members" edges to the User entity.
func (yttuo *YouTubeTalentUpdateOne) AddMembers(u ...*User) *YouTubeTalentUpdateOne {
	ids := make([]uint64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return yttuo.AddMemberIDs(ids...)
}

// Mutation returns the YouTubeTalentMutation object of the builder.
func (yttuo *YouTubeTalentUpdateOne) Mutation() *YouTubeTalentMutation {
	return yttuo.mutation
}

// ClearGuilds clears all "guilds" edges to the Guild entity.
func (yttuo *YouTubeTalentUpdateOne) ClearGuilds() *YouTubeTalentUpdateOne {
	yttuo.mutation.ClearGuilds()
	return yttuo
}

// RemoveGuildIDs removes the "guilds" edge to Guild entities by IDs.
func (yttuo *YouTubeTalentUpdateOne) RemoveGuildIDs(ids ...uint64) *YouTubeTalentUpdateOne {
	yttuo.mutation.RemoveGuildIDs(ids...)
	return yttuo
}

// RemoveGuilds removes "guilds" edges to Guild entities.
func (yttuo *YouTubeTalentUpdateOne) RemoveGuilds(g ...*Guild) *YouTubeTalentUpdateOne {
	ids := make([]uint64, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return yttuo.RemoveGuildIDs(ids...)
}

// ClearMembers clears all "members" edges to the User entity.
func (yttuo *YouTubeTalentUpdateOne) ClearMembers() *YouTubeTalentUpdateOne {
	yttuo.mutation.ClearMembers()
	return yttuo
}

// RemoveMemberIDs removes the "members" edge to User entities by IDs.
func (yttuo *YouTubeTalentUpdateOne) RemoveMemberIDs(ids ...uint64) *YouTubeTalentUpdateOne {
	yttuo.mutation.RemoveMemberIDs(ids...)
	return yttuo
}

// RemoveMembers removes "members" edges to User entities.
func (yttuo *YouTubeTalentUpdateOne) RemoveMembers(u ...*User) *YouTubeTalentUpdateOne {
	ids := make([]uint64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return yttuo.RemoveMemberIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (yttuo *YouTubeTalentUpdateOne) Select(field string, fields ...string) *YouTubeTalentUpdateOne {
	yttuo.fields = append([]string{field}, fields...)
	return yttuo
}

// Save executes the query and returns the updated YouTubeTalent entity.
func (yttuo *YouTubeTalentUpdateOne) Save(ctx context.Context) (*YouTubeTalent, error) {
	var (
		err  error
		node *YouTubeTalent
	)
	if len(yttuo.hooks) == 0 {
		node, err = yttuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*YouTubeTalentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			yttuo.mutation = mutation
			node, err = yttuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(yttuo.hooks) - 1; i >= 0; i-- {
			if yttuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = yttuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, yttuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (yttuo *YouTubeTalentUpdateOne) SaveX(ctx context.Context) *YouTubeTalent {
	node, err := yttuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (yttuo *YouTubeTalentUpdateOne) Exec(ctx context.Context) error {
	_, err := yttuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (yttuo *YouTubeTalentUpdateOne) ExecX(ctx context.Context) {
	if err := yttuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (yttuo *YouTubeTalentUpdateOne) sqlSave(ctx context.Context) (_node *YouTubeTalent, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   youtubetalent.Table,
			Columns: youtubetalent.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: youtubetalent.FieldID,
			},
		},
	}
	id, ok := yttuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing YouTubeTalent.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := yttuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, youtubetalent.FieldID)
		for _, f := range fields {
			if !youtubetalent.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != youtubetalent.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := yttuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := yttuo.mutation.ChannelName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: youtubetalent.FieldChannelName,
		})
	}
	if value, ok := yttuo.mutation.ThumbnailURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: youtubetalent.FieldThumbnailURL,
		})
	}
	if value, ok := yttuo.mutation.MembershipVideoID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: youtubetalent.FieldMembershipVideoID,
		})
	}
	if yttuo.mutation.MembershipVideoIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: youtubetalent.FieldMembershipVideoID,
		})
	}
	if value, ok := yttuo.mutation.LastMembershipVideoIDMiss(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: youtubetalent.FieldLastMembershipVideoIDMiss,
		})
	}
	if yttuo.mutation.LastMembershipVideoIDMissCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: youtubetalent.FieldLastMembershipVideoIDMiss,
		})
	}
	if value, ok := yttuo.mutation.LastUpdated(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: youtubetalent.FieldLastUpdated,
		})
	}
	if yttuo.mutation.GuildsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   youtubetalent.GuildsTable,
			Columns: youtubetalent.GuildsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: guild.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := yttuo.mutation.RemovedGuildsIDs(); len(nodes) > 0 && !yttuo.mutation.GuildsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   youtubetalent.GuildsTable,
			Columns: youtubetalent.GuildsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: guild.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := yttuo.mutation.GuildsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   youtubetalent.GuildsTable,
			Columns: youtubetalent.GuildsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: guild.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if yttuo.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   youtubetalent.MembersTable,
			Columns: youtubetalent.MembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := yttuo.mutation.RemovedMembersIDs(); len(nodes) > 0 && !yttuo.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   youtubetalent.MembersTable,
			Columns: youtubetalent.MembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := yttuo.mutation.MembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   youtubetalent.MembersTable,
			Columns: youtubetalent.MembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &YouTubeTalent{config: yttuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, yttuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{youtubetalent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
