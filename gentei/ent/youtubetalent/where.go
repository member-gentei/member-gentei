// Code generated by ent, DO NOT EDIT.

package youtubetalent

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/member-gentei/member-gentei/gentei/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.YouTubeTalent {
	return predicate.YouTubeTalent(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.YouTubeTalent {
	return predicate.YouTubeTalent(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.YouTubeTalent {
	return predicate.YouTubeTalent(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.YouTubeTalent {
	return predicate.YouTubeTalent(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.YouTubeTalent {
	return predicate.YouTubeTalent(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.YouTubeTalent {
	return predicate.YouTubeTalent(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.YouTubeTalent {
	return predicate.YouTubeTalent(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.YouTubeTalent {
	return predicate.YouTubeTalent(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.YouTubeTalent {
	return predicate.YouTubeTalent(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.YouTubeTalent {
	return predicate.YouTubeTalent(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.YouTubeTalent {
	return predicate.YouTubeTalent(sql.FieldContainsFold(FieldID, id))
}

// ChannelName applies equality check predicate on the "channel_name" field. It's identical to ChannelNameEQ.
func ChannelName(v string) predicate.YouTubeTalent {
	return predicate.YouTubeTalent(sql.FieldEQ(FieldChannelName, v))
}

// ThumbnailURL applies equality check predicate on the "thumbnail_url" field. It's identical to ThumbnailURLEQ.
func ThumbnailURL(v string) predicate.YouTubeTalent {
	return predicate.YouTubeTalent(sql.FieldEQ(FieldThumbnailURL, v))
}

// MembershipVideoID applies equality check predicate on the "membership_video_id" field. It's identical to MembershipVideoIDEQ.
func MembershipVideoID(v string) predicate.YouTubeTalent {
	return predicate.YouTubeTalent(sql.FieldEQ(FieldMembershipVideoID, v))
}

// LastMembershipVideoIDMiss applies equality check predicate on the "last_membership_video_id_miss" field. It's identical to LastMembershipVideoIDMissEQ.
func LastMembershipVideoIDMiss(v time.Time) predicate.YouTubeTalent {
	return predicate.YouTubeTalent(sql.FieldEQ(FieldLastMembershipVideoIDMiss, v))
}

// LastUpdated applies equality check predicate on the "last_updated" field. It's identical to LastUpdatedEQ.
func LastUpdated(v time.Time) predicate.YouTubeTalent {
	return predicate.YouTubeTalent(sql.FieldEQ(FieldLastUpdated, v))
}

// Disabled applies equality check predicate on the "disabled" field. It's identical to DisabledEQ.
func Disabled(v time.Time) predicate.YouTubeTalent {
	return predicate.YouTubeTalent(sql.FieldEQ(FieldDisabled, v))
}

// DisabledPermanently applies equality check predicate on the "disabled_permanently" field. It's identical to DisabledPermanentlyEQ.
func DisabledPermanently(v bool) predicate.YouTubeTalent {
	return predicate.YouTubeTalent(sql.FieldEQ(FieldDisabledPermanently, v))
}

// ChannelNameEQ applies the EQ predicate on the "channel_name" field.
func ChannelNameEQ(v string) predicate.YouTubeTalent {
	return predicate.YouTubeTalent(sql.FieldEQ(FieldChannelName, v))
}

// ChannelNameNEQ applies the NEQ predicate on the "channel_name" field.
func ChannelNameNEQ(v string) predicate.YouTubeTalent {
	return predicate.YouTubeTalent(sql.FieldNEQ(FieldChannelName, v))
}

// ChannelNameIn applies the In predicate on the "channel_name" field.
func ChannelNameIn(vs ...string) predicate.YouTubeTalent {
	return predicate.YouTubeTalent(sql.FieldIn(FieldChannelName, vs...))
}

// ChannelNameNotIn applies the NotIn predicate on the "channel_name" field.
func ChannelNameNotIn(vs ...string) predicate.YouTubeTalent {
	return predicate.YouTubeTalent(sql.FieldNotIn(FieldChannelName, vs...))
}

// ChannelNameGT applies the GT predicate on the "channel_name" field.
func ChannelNameGT(v string) predicate.YouTubeTalent {
	return predicate.YouTubeTalent(sql.FieldGT(FieldChannelName, v))
}

// ChannelNameGTE applies the GTE predicate on the "channel_name" field.
func ChannelNameGTE(v string) predicate.YouTubeTalent {
	return predicate.YouTubeTalent(sql.FieldGTE(FieldChannelName, v))
}

// ChannelNameLT applies the LT predicate on the "channel_name" field.
func ChannelNameLT(v string) predicate.YouTubeTalent {
	return predicate.YouTubeTalent(sql.FieldLT(FieldChannelName, v))
}

// ChannelNameLTE applies the LTE predicate on the "channel_name" field.
func ChannelNameLTE(v string) predicate.YouTubeTalent {
	return predicate.YouTubeTalent(sql.FieldLTE(FieldChannelName, v))
}

// ChannelNameContains applies the Contains predicate on the "channel_name" field.
func ChannelNameContains(v string) predicate.YouTubeTalent {
	return predicate.YouTubeTalent(sql.FieldContains(FieldChannelName, v))
}

// ChannelNameHasPrefix applies the HasPrefix predicate on the "channel_name" field.
func ChannelNameHasPrefix(v string) predicate.YouTubeTalent {
	return predicate.YouTubeTalent(sql.FieldHasPrefix(FieldChannelName, v))
}

// ChannelNameHasSuffix applies the HasSuffix predicate on the "channel_name" field.
func ChannelNameHasSuffix(v string) predicate.YouTubeTalent {
	return predicate.YouTubeTalent(sql.FieldHasSuffix(FieldChannelName, v))
}

// ChannelNameEqualFold applies the EqualFold predicate on the "channel_name" field.
func ChannelNameEqualFold(v string) predicate.YouTubeTalent {
	return predicate.YouTubeTalent(sql.FieldEqualFold(FieldChannelName, v))
}

// ChannelNameContainsFold applies the ContainsFold predicate on the "channel_name" field.
func ChannelNameContainsFold(v string) predicate.YouTubeTalent {
	return predicate.YouTubeTalent(sql.FieldContainsFold(FieldChannelName, v))
}

// ThumbnailURLEQ applies the EQ predicate on the "thumbnail_url" field.
func ThumbnailURLEQ(v string) predicate.YouTubeTalent {
	return predicate.YouTubeTalent(sql.FieldEQ(FieldThumbnailURL, v))
}

// ThumbnailURLNEQ applies the NEQ predicate on the "thumbnail_url" field.
func ThumbnailURLNEQ(v string) predicate.YouTubeTalent {
	return predicate.YouTubeTalent(sql.FieldNEQ(FieldThumbnailURL, v))
}

// ThumbnailURLIn applies the In predicate on the "thumbnail_url" field.
func ThumbnailURLIn(vs ...string) predicate.YouTubeTalent {
	return predicate.YouTubeTalent(sql.FieldIn(FieldThumbnailURL, vs...))
}

// ThumbnailURLNotIn applies the NotIn predicate on the "thumbnail_url" field.
func ThumbnailURLNotIn(vs ...string) predicate.YouTubeTalent {
	return predicate.YouTubeTalent(sql.FieldNotIn(FieldThumbnailURL, vs...))
}

// ThumbnailURLGT applies the GT predicate on the "thumbnail_url" field.
func ThumbnailURLGT(v string) predicate.YouTubeTalent {
	return predicate.YouTubeTalent(sql.FieldGT(FieldThumbnailURL, v))
}

// ThumbnailURLGTE applies the GTE predicate on the "thumbnail_url" field.
func ThumbnailURLGTE(v string) predicate.YouTubeTalent {
	return predicate.YouTubeTalent(sql.FieldGTE(FieldThumbnailURL, v))
}

// ThumbnailURLLT applies the LT predicate on the "thumbnail_url" field.
func ThumbnailURLLT(v string) predicate.YouTubeTalent {
	return predicate.YouTubeTalent(sql.FieldLT(FieldThumbnailURL, v))
}

// ThumbnailURLLTE applies the LTE predicate on the "thumbnail_url" field.
func ThumbnailURLLTE(v string) predicate.YouTubeTalent {
	return predicate.YouTubeTalent(sql.FieldLTE(FieldThumbnailURL, v))
}

// ThumbnailURLContains applies the Contains predicate on the "thumbnail_url" field.
func ThumbnailURLContains(v string) predicate.YouTubeTalent {
	return predicate.YouTubeTalent(sql.FieldContains(FieldThumbnailURL, v))
}

// ThumbnailURLHasPrefix applies the HasPrefix predicate on the "thumbnail_url" field.
func ThumbnailURLHasPrefix(v string) predicate.YouTubeTalent {
	return predicate.YouTubeTalent(sql.FieldHasPrefix(FieldThumbnailURL, v))
}

// ThumbnailURLHasSuffix applies the HasSuffix predicate on the "thumbnail_url" field.
func ThumbnailURLHasSuffix(v string) predicate.YouTubeTalent {
	return predicate.YouTubeTalent(sql.FieldHasSuffix(FieldThumbnailURL, v))
}

// ThumbnailURLEqualFold applies the EqualFold predicate on the "thumbnail_url" field.
func ThumbnailURLEqualFold(v string) predicate.YouTubeTalent {
	return predicate.YouTubeTalent(sql.FieldEqualFold(FieldThumbnailURL, v))
}

// ThumbnailURLContainsFold applies the ContainsFold predicate on the "thumbnail_url" field.
func ThumbnailURLContainsFold(v string) predicate.YouTubeTalent {
	return predicate.YouTubeTalent(sql.FieldContainsFold(FieldThumbnailURL, v))
}

// MembershipVideoIDEQ applies the EQ predicate on the "membership_video_id" field.
func MembershipVideoIDEQ(v string) predicate.YouTubeTalent {
	return predicate.YouTubeTalent(sql.FieldEQ(FieldMembershipVideoID, v))
}

// MembershipVideoIDNEQ applies the NEQ predicate on the "membership_video_id" field.
func MembershipVideoIDNEQ(v string) predicate.YouTubeTalent {
	return predicate.YouTubeTalent(sql.FieldNEQ(FieldMembershipVideoID, v))
}

// MembershipVideoIDIn applies the In predicate on the "membership_video_id" field.
func MembershipVideoIDIn(vs ...string) predicate.YouTubeTalent {
	return predicate.YouTubeTalent(sql.FieldIn(FieldMembershipVideoID, vs...))
}

// MembershipVideoIDNotIn applies the NotIn predicate on the "membership_video_id" field.
func MembershipVideoIDNotIn(vs ...string) predicate.YouTubeTalent {
	return predicate.YouTubeTalent(sql.FieldNotIn(FieldMembershipVideoID, vs...))
}

// MembershipVideoIDGT applies the GT predicate on the "membership_video_id" field.
func MembershipVideoIDGT(v string) predicate.YouTubeTalent {
	return predicate.YouTubeTalent(sql.FieldGT(FieldMembershipVideoID, v))
}

// MembershipVideoIDGTE applies the GTE predicate on the "membership_video_id" field.
func MembershipVideoIDGTE(v string) predicate.YouTubeTalent {
	return predicate.YouTubeTalent(sql.FieldGTE(FieldMembershipVideoID, v))
}

// MembershipVideoIDLT applies the LT predicate on the "membership_video_id" field.
func MembershipVideoIDLT(v string) predicate.YouTubeTalent {
	return predicate.YouTubeTalent(sql.FieldLT(FieldMembershipVideoID, v))
}

// MembershipVideoIDLTE applies the LTE predicate on the "membership_video_id" field.
func MembershipVideoIDLTE(v string) predicate.YouTubeTalent {
	return predicate.YouTubeTalent(sql.FieldLTE(FieldMembershipVideoID, v))
}

// MembershipVideoIDContains applies the Contains predicate on the "membership_video_id" field.
func MembershipVideoIDContains(v string) predicate.YouTubeTalent {
	return predicate.YouTubeTalent(sql.FieldContains(FieldMembershipVideoID, v))
}

// MembershipVideoIDHasPrefix applies the HasPrefix predicate on the "membership_video_id" field.
func MembershipVideoIDHasPrefix(v string) predicate.YouTubeTalent {
	return predicate.YouTubeTalent(sql.FieldHasPrefix(FieldMembershipVideoID, v))
}

// MembershipVideoIDHasSuffix applies the HasSuffix predicate on the "membership_video_id" field.
func MembershipVideoIDHasSuffix(v string) predicate.YouTubeTalent {
	return predicate.YouTubeTalent(sql.FieldHasSuffix(FieldMembershipVideoID, v))
}

// MembershipVideoIDIsNil applies the IsNil predicate on the "membership_video_id" field.
func MembershipVideoIDIsNil() predicate.YouTubeTalent {
	return predicate.YouTubeTalent(sql.FieldIsNull(FieldMembershipVideoID))
}

// MembershipVideoIDNotNil applies the NotNil predicate on the "membership_video_id" field.
func MembershipVideoIDNotNil() predicate.YouTubeTalent {
	return predicate.YouTubeTalent(sql.FieldNotNull(FieldMembershipVideoID))
}

// MembershipVideoIDEqualFold applies the EqualFold predicate on the "membership_video_id" field.
func MembershipVideoIDEqualFold(v string) predicate.YouTubeTalent {
	return predicate.YouTubeTalent(sql.FieldEqualFold(FieldMembershipVideoID, v))
}

// MembershipVideoIDContainsFold applies the ContainsFold predicate on the "membership_video_id" field.
func MembershipVideoIDContainsFold(v string) predicate.YouTubeTalent {
	return predicate.YouTubeTalent(sql.FieldContainsFold(FieldMembershipVideoID, v))
}

// LastMembershipVideoIDMissEQ applies the EQ predicate on the "last_membership_video_id_miss" field.
func LastMembershipVideoIDMissEQ(v time.Time) predicate.YouTubeTalent {
	return predicate.YouTubeTalent(sql.FieldEQ(FieldLastMembershipVideoIDMiss, v))
}

// LastMembershipVideoIDMissNEQ applies the NEQ predicate on the "last_membership_video_id_miss" field.
func LastMembershipVideoIDMissNEQ(v time.Time) predicate.YouTubeTalent {
	return predicate.YouTubeTalent(sql.FieldNEQ(FieldLastMembershipVideoIDMiss, v))
}

// LastMembershipVideoIDMissIn applies the In predicate on the "last_membership_video_id_miss" field.
func LastMembershipVideoIDMissIn(vs ...time.Time) predicate.YouTubeTalent {
	return predicate.YouTubeTalent(sql.FieldIn(FieldLastMembershipVideoIDMiss, vs...))
}

// LastMembershipVideoIDMissNotIn applies the NotIn predicate on the "last_membership_video_id_miss" field.
func LastMembershipVideoIDMissNotIn(vs ...time.Time) predicate.YouTubeTalent {
	return predicate.YouTubeTalent(sql.FieldNotIn(FieldLastMembershipVideoIDMiss, vs...))
}

// LastMembershipVideoIDMissGT applies the GT predicate on the "last_membership_video_id_miss" field.
func LastMembershipVideoIDMissGT(v time.Time) predicate.YouTubeTalent {
	return predicate.YouTubeTalent(sql.FieldGT(FieldLastMembershipVideoIDMiss, v))
}

// LastMembershipVideoIDMissGTE applies the GTE predicate on the "last_membership_video_id_miss" field.
func LastMembershipVideoIDMissGTE(v time.Time) predicate.YouTubeTalent {
	return predicate.YouTubeTalent(sql.FieldGTE(FieldLastMembershipVideoIDMiss, v))
}

// LastMembershipVideoIDMissLT applies the LT predicate on the "last_membership_video_id_miss" field.
func LastMembershipVideoIDMissLT(v time.Time) predicate.YouTubeTalent {
	return predicate.YouTubeTalent(sql.FieldLT(FieldLastMembershipVideoIDMiss, v))
}

// LastMembershipVideoIDMissLTE applies the LTE predicate on the "last_membership_video_id_miss" field.
func LastMembershipVideoIDMissLTE(v time.Time) predicate.YouTubeTalent {
	return predicate.YouTubeTalent(sql.FieldLTE(FieldLastMembershipVideoIDMiss, v))
}

// LastMembershipVideoIDMissIsNil applies the IsNil predicate on the "last_membership_video_id_miss" field.
func LastMembershipVideoIDMissIsNil() predicate.YouTubeTalent {
	return predicate.YouTubeTalent(sql.FieldIsNull(FieldLastMembershipVideoIDMiss))
}

// LastMembershipVideoIDMissNotNil applies the NotNil predicate on the "last_membership_video_id_miss" field.
func LastMembershipVideoIDMissNotNil() predicate.YouTubeTalent {
	return predicate.YouTubeTalent(sql.FieldNotNull(FieldLastMembershipVideoIDMiss))
}

// LastUpdatedEQ applies the EQ predicate on the "last_updated" field.
func LastUpdatedEQ(v time.Time) predicate.YouTubeTalent {
	return predicate.YouTubeTalent(sql.FieldEQ(FieldLastUpdated, v))
}

// LastUpdatedNEQ applies the NEQ predicate on the "last_updated" field.
func LastUpdatedNEQ(v time.Time) predicate.YouTubeTalent {
	return predicate.YouTubeTalent(sql.FieldNEQ(FieldLastUpdated, v))
}

// LastUpdatedIn applies the In predicate on the "last_updated" field.
func LastUpdatedIn(vs ...time.Time) predicate.YouTubeTalent {
	return predicate.YouTubeTalent(sql.FieldIn(FieldLastUpdated, vs...))
}

// LastUpdatedNotIn applies the NotIn predicate on the "last_updated" field.
func LastUpdatedNotIn(vs ...time.Time) predicate.YouTubeTalent {
	return predicate.YouTubeTalent(sql.FieldNotIn(FieldLastUpdated, vs...))
}

// LastUpdatedGT applies the GT predicate on the "last_updated" field.
func LastUpdatedGT(v time.Time) predicate.YouTubeTalent {
	return predicate.YouTubeTalent(sql.FieldGT(FieldLastUpdated, v))
}

// LastUpdatedGTE applies the GTE predicate on the "last_updated" field.
func LastUpdatedGTE(v time.Time) predicate.YouTubeTalent {
	return predicate.YouTubeTalent(sql.FieldGTE(FieldLastUpdated, v))
}

// LastUpdatedLT applies the LT predicate on the "last_updated" field.
func LastUpdatedLT(v time.Time) predicate.YouTubeTalent {
	return predicate.YouTubeTalent(sql.FieldLT(FieldLastUpdated, v))
}

// LastUpdatedLTE applies the LTE predicate on the "last_updated" field.
func LastUpdatedLTE(v time.Time) predicate.YouTubeTalent {
	return predicate.YouTubeTalent(sql.FieldLTE(FieldLastUpdated, v))
}

// DisabledEQ applies the EQ predicate on the "disabled" field.
func DisabledEQ(v time.Time) predicate.YouTubeTalent {
	return predicate.YouTubeTalent(sql.FieldEQ(FieldDisabled, v))
}

// DisabledNEQ applies the NEQ predicate on the "disabled" field.
func DisabledNEQ(v time.Time) predicate.YouTubeTalent {
	return predicate.YouTubeTalent(sql.FieldNEQ(FieldDisabled, v))
}

// DisabledIn applies the In predicate on the "disabled" field.
func DisabledIn(vs ...time.Time) predicate.YouTubeTalent {
	return predicate.YouTubeTalent(sql.FieldIn(FieldDisabled, vs...))
}

// DisabledNotIn applies the NotIn predicate on the "disabled" field.
func DisabledNotIn(vs ...time.Time) predicate.YouTubeTalent {
	return predicate.YouTubeTalent(sql.FieldNotIn(FieldDisabled, vs...))
}

// DisabledGT applies the GT predicate on the "disabled" field.
func DisabledGT(v time.Time) predicate.YouTubeTalent {
	return predicate.YouTubeTalent(sql.FieldGT(FieldDisabled, v))
}

// DisabledGTE applies the GTE predicate on the "disabled" field.
func DisabledGTE(v time.Time) predicate.YouTubeTalent {
	return predicate.YouTubeTalent(sql.FieldGTE(FieldDisabled, v))
}

// DisabledLT applies the LT predicate on the "disabled" field.
func DisabledLT(v time.Time) predicate.YouTubeTalent {
	return predicate.YouTubeTalent(sql.FieldLT(FieldDisabled, v))
}

// DisabledLTE applies the LTE predicate on the "disabled" field.
func DisabledLTE(v time.Time) predicate.YouTubeTalent {
	return predicate.YouTubeTalent(sql.FieldLTE(FieldDisabled, v))
}

// DisabledIsNil applies the IsNil predicate on the "disabled" field.
func DisabledIsNil() predicate.YouTubeTalent {
	return predicate.YouTubeTalent(sql.FieldIsNull(FieldDisabled))
}

// DisabledNotNil applies the NotNil predicate on the "disabled" field.
func DisabledNotNil() predicate.YouTubeTalent {
	return predicate.YouTubeTalent(sql.FieldNotNull(FieldDisabled))
}

// DisabledPermanentlyEQ applies the EQ predicate on the "disabled_permanently" field.
func DisabledPermanentlyEQ(v bool) predicate.YouTubeTalent {
	return predicate.YouTubeTalent(sql.FieldEQ(FieldDisabledPermanently, v))
}

// DisabledPermanentlyNEQ applies the NEQ predicate on the "disabled_permanently" field.
func DisabledPermanentlyNEQ(v bool) predicate.YouTubeTalent {
	return predicate.YouTubeTalent(sql.FieldNEQ(FieldDisabledPermanently, v))
}

// HasGuilds applies the HasEdge predicate on the "guilds" edge.
func HasGuilds() predicate.YouTubeTalent {
	return predicate.YouTubeTalent(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, GuildsTable, GuildsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGuildsWith applies the HasEdge predicate on the "guilds" edge with a given conditions (other predicates).
func HasGuildsWith(preds ...predicate.Guild) predicate.YouTubeTalent {
	return predicate.YouTubeTalent(func(s *sql.Selector) {
		step := newGuildsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRoles applies the HasEdge predicate on the "roles" edge.
func HasRoles() predicate.YouTubeTalent {
	return predicate.YouTubeTalent(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RolesTable, RolesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRolesWith applies the HasEdge predicate on the "roles" edge with a given conditions (other predicates).
func HasRolesWith(preds ...predicate.GuildRole) predicate.YouTubeTalent {
	return predicate.YouTubeTalent(func(s *sql.Selector) {
		step := newRolesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMemberships applies the HasEdge predicate on the "memberships" edge.
func HasMemberships() predicate.YouTubeTalent {
	return predicate.YouTubeTalent(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, MembershipsTable, MembershipsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMembershipsWith applies the HasEdge predicate on the "memberships" edge with a given conditions (other predicates).
func HasMembershipsWith(preds ...predicate.UserMembership) predicate.YouTubeTalent {
	return predicate.YouTubeTalent(func(s *sql.Selector) {
		step := newMembershipsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.YouTubeTalent) predicate.YouTubeTalent {
	return predicate.YouTubeTalent(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.YouTubeTalent) predicate.YouTubeTalent {
	return predicate.YouTubeTalent(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.YouTubeTalent) predicate.YouTubeTalent {
	return predicate.YouTubeTalent(func(s *sql.Selector) {
		p(s.Not())
	})
}
