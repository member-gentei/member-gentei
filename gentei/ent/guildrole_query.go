// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/member-gentei/member-gentei/gentei/ent/guild"
	"github.com/member-gentei/member-gentei/gentei/ent/guildrole"
	"github.com/member-gentei/member-gentei/gentei/ent/predicate"
	"github.com/member-gentei/member-gentei/gentei/ent/user"
)

// GuildRoleQuery is the builder for querying GuildRole entities.
type GuildRoleQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.GuildRole
	// eager-loading edges.
	withGuild *GuildQuery
	withUsers *UserQuery
	withFKs   bool
	modifiers []func(s *sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the GuildRoleQuery builder.
func (grq *GuildRoleQuery) Where(ps ...predicate.GuildRole) *GuildRoleQuery {
	grq.predicates = append(grq.predicates, ps...)
	return grq
}

// Limit adds a limit step to the query.
func (grq *GuildRoleQuery) Limit(limit int) *GuildRoleQuery {
	grq.limit = &limit
	return grq
}

// Offset adds an offset step to the query.
func (grq *GuildRoleQuery) Offset(offset int) *GuildRoleQuery {
	grq.offset = &offset
	return grq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (grq *GuildRoleQuery) Unique(unique bool) *GuildRoleQuery {
	grq.unique = &unique
	return grq
}

// Order adds an order step to the query.
func (grq *GuildRoleQuery) Order(o ...OrderFunc) *GuildRoleQuery {
	grq.order = append(grq.order, o...)
	return grq
}

// QueryGuild chains the current query on the "guild" edge.
func (grq *GuildRoleQuery) QueryGuild() *GuildQuery {
	query := &GuildQuery{config: grq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := grq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := grq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(guildrole.Table, guildrole.FieldID, selector),
			sqlgraph.To(guild.Table, guild.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, guildrole.GuildTable, guildrole.GuildColumn),
		)
		fromU = sqlgraph.SetNeighbors(grq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUsers chains the current query on the "users" edge.
func (grq *GuildRoleQuery) QueryUsers() *UserQuery {
	query := &UserQuery{config: grq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := grq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := grq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(guildrole.Table, guildrole.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, guildrole.UsersTable, guildrole.UsersPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(grq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first GuildRole entity from the query.
// Returns a *NotFoundError when no GuildRole was found.
func (grq *GuildRoleQuery) First(ctx context.Context) (*GuildRole, error) {
	nodes, err := grq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{guildrole.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (grq *GuildRoleQuery) FirstX(ctx context.Context) *GuildRole {
	node, err := grq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first GuildRole ID from the query.
// Returns a *NotFoundError when no GuildRole ID was found.
func (grq *GuildRoleQuery) FirstID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = grq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{guildrole.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (grq *GuildRoleQuery) FirstIDX(ctx context.Context) uint64 {
	id, err := grq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single GuildRole entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one GuildRole entity is not found.
// Returns a *NotFoundError when no GuildRole entities are found.
func (grq *GuildRoleQuery) Only(ctx context.Context) (*GuildRole, error) {
	nodes, err := grq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{guildrole.Label}
	default:
		return nil, &NotSingularError{guildrole.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (grq *GuildRoleQuery) OnlyX(ctx context.Context) *GuildRole {
	node, err := grq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only GuildRole ID in the query.
// Returns a *NotSingularError when exactly one GuildRole ID is not found.
// Returns a *NotFoundError when no entities are found.
func (grq *GuildRoleQuery) OnlyID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = grq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{guildrole.Label}
	default:
		err = &NotSingularError{guildrole.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (grq *GuildRoleQuery) OnlyIDX(ctx context.Context) uint64 {
	id, err := grq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of GuildRoles.
func (grq *GuildRoleQuery) All(ctx context.Context) ([]*GuildRole, error) {
	if err := grq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return grq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (grq *GuildRoleQuery) AllX(ctx context.Context) []*GuildRole {
	nodes, err := grq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of GuildRole IDs.
func (grq *GuildRoleQuery) IDs(ctx context.Context) ([]uint64, error) {
	var ids []uint64
	if err := grq.Select(guildrole.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (grq *GuildRoleQuery) IDsX(ctx context.Context) []uint64 {
	ids, err := grq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (grq *GuildRoleQuery) Count(ctx context.Context) (int, error) {
	if err := grq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return grq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (grq *GuildRoleQuery) CountX(ctx context.Context) int {
	count, err := grq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (grq *GuildRoleQuery) Exist(ctx context.Context) (bool, error) {
	if err := grq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return grq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (grq *GuildRoleQuery) ExistX(ctx context.Context) bool {
	exist, err := grq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the GuildRoleQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (grq *GuildRoleQuery) Clone() *GuildRoleQuery {
	if grq == nil {
		return nil
	}
	return &GuildRoleQuery{
		config:     grq.config,
		limit:      grq.limit,
		offset:     grq.offset,
		order:      append([]OrderFunc{}, grq.order...),
		predicates: append([]predicate.GuildRole{}, grq.predicates...),
		withGuild:  grq.withGuild.Clone(),
		withUsers:  grq.withUsers.Clone(),
		// clone intermediate query.
		sql:  grq.sql.Clone(),
		path: grq.path,
	}
}

// WithGuild tells the query-builder to eager-load the nodes that are connected to
// the "guild" edge. The optional arguments are used to configure the query builder of the edge.
func (grq *GuildRoleQuery) WithGuild(opts ...func(*GuildQuery)) *GuildRoleQuery {
	query := &GuildQuery{config: grq.config}
	for _, opt := range opts {
		opt(query)
	}
	grq.withGuild = query
	return grq
}

// WithUsers tells the query-builder to eager-load the nodes that are connected to
// the "users" edge. The optional arguments are used to configure the query builder of the edge.
func (grq *GuildRoleQuery) WithUsers(opts ...func(*UserQuery)) *GuildRoleQuery {
	query := &UserQuery{config: grq.config}
	for _, opt := range opts {
		opt(query)
	}
	grq.withUsers = query
	return grq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.GuildRole.Query().
//		GroupBy(guildrole.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (grq *GuildRoleQuery) GroupBy(field string, fields ...string) *GuildRoleGroupBy {
	group := &GuildRoleGroupBy{config: grq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := grq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return grq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.GuildRole.Query().
//		Select(guildrole.FieldName).
//		Scan(ctx, &v)
//
func (grq *GuildRoleQuery) Select(fields ...string) *GuildRoleSelect {
	grq.fields = append(grq.fields, fields...)
	return &GuildRoleSelect{GuildRoleQuery: grq}
}

func (grq *GuildRoleQuery) prepareQuery(ctx context.Context) error {
	for _, f := range grq.fields {
		if !guildrole.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if grq.path != nil {
		prev, err := grq.path(ctx)
		if err != nil {
			return err
		}
		grq.sql = prev
	}
	return nil
}

func (grq *GuildRoleQuery) sqlAll(ctx context.Context) ([]*GuildRole, error) {
	var (
		nodes       = []*GuildRole{}
		withFKs     = grq.withFKs
		_spec       = grq.querySpec()
		loadedTypes = [2]bool{
			grq.withGuild != nil,
			grq.withUsers != nil,
		}
	)
	if grq.withGuild != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, guildrole.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &GuildRole{config: grq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(grq.modifiers) > 0 {
		_spec.Modifiers = grq.modifiers
	}
	if err := sqlgraph.QueryNodes(ctx, grq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := grq.withGuild; query != nil {
		ids := make([]uint64, 0, len(nodes))
		nodeids := make(map[uint64][]*GuildRole)
		for i := range nodes {
			if nodes[i].guild_roles == nil {
				continue
			}
			fk := *nodes[i].guild_roles
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(guild.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "guild_roles" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Guild = n
			}
		}
	}

	if query := grq.withUsers; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		ids := make(map[uint64]*GuildRole, len(nodes))
		for _, node := range nodes {
			ids[node.ID] = node
			fks = append(fks, node.ID)
			node.Edges.Users = []*User{}
		}
		var (
			edgeids []uint64
			edges   = make(map[uint64][]*GuildRole)
		)
		_spec := &sqlgraph.EdgeQuerySpec{
			Edge: &sqlgraph.EdgeSpec{
				Inverse: true,
				Table:   guildrole.UsersTable,
				Columns: guildrole.UsersPrimaryKey,
			},
			Predicate: func(s *sql.Selector) {
				s.Where(sql.InValues(guildrole.UsersPrimaryKey[1], fks...))
			},
			ScanValues: func() [2]interface{} {
				return [2]interface{}{new(sql.NullInt64), new(sql.NullInt64)}
			},
			Assign: func(out, in interface{}) error {
				eout, ok := out.(*sql.NullInt64)
				if !ok || eout == nil {
					return fmt.Errorf("unexpected id value for edge-out")
				}
				ein, ok := in.(*sql.NullInt64)
				if !ok || ein == nil {
					return fmt.Errorf("unexpected id value for edge-in")
				}
				outValue := uint64(eout.Int64)
				inValue := uint64(ein.Int64)
				node, ok := ids[outValue]
				if !ok {
					return fmt.Errorf("unexpected node id in edges: %v", outValue)
				}
				if _, ok := edges[inValue]; !ok {
					edgeids = append(edgeids, inValue)
				}
				edges[inValue] = append(edges[inValue], node)
				return nil
			},
		}
		if err := sqlgraph.QueryEdges(ctx, grq.driver, _spec); err != nil {
			return nil, fmt.Errorf(`query edges "users": %w`, err)
		}
		query.Where(user.IDIn(edgeids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := edges[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected "users" node returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Users = append(nodes[i].Edges.Users, n)
			}
		}
	}

	return nodes, nil
}

func (grq *GuildRoleQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := grq.querySpec()
	if len(grq.modifiers) > 0 {
		_spec.Modifiers = grq.modifiers
	}
	return sqlgraph.CountNodes(ctx, grq.driver, _spec)
}

func (grq *GuildRoleQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := grq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (grq *GuildRoleQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   guildrole.Table,
			Columns: guildrole.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: guildrole.FieldID,
			},
		},
		From:   grq.sql,
		Unique: true,
	}
	if unique := grq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := grq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, guildrole.FieldID)
		for i := range fields {
			if fields[i] != guildrole.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := grq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := grq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := grq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := grq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (grq *GuildRoleQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(grq.driver.Dialect())
	t1 := builder.Table(guildrole.Table)
	columns := grq.fields
	if len(columns) == 0 {
		columns = guildrole.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if grq.sql != nil {
		selector = grq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	for _, m := range grq.modifiers {
		m(selector)
	}
	for _, p := range grq.predicates {
		p(selector)
	}
	for _, p := range grq.order {
		p(selector)
	}
	if offset := grq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := grq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ForUpdate locks the selected rows against concurrent updates, and prevent them from being
// updated, deleted or "selected ... for update" by other sessions, until the transaction is
// either committed or rolled-back.
func (grq *GuildRoleQuery) ForUpdate(opts ...sql.LockOption) *GuildRoleQuery {
	if grq.driver.Dialect() == dialect.Postgres {
		grq.Unique(false)
	}
	grq.modifiers = append(grq.modifiers, func(s *sql.Selector) {
		s.ForUpdate(opts...)
	})
	return grq
}

// ForShare behaves similarly to ForUpdate, except that it acquires a shared mode lock
// on any rows that are read. Other sessions can read the rows, but cannot modify them
// until your transaction commits.
func (grq *GuildRoleQuery) ForShare(opts ...sql.LockOption) *GuildRoleQuery {
	if grq.driver.Dialect() == dialect.Postgres {
		grq.Unique(false)
	}
	grq.modifiers = append(grq.modifiers, func(s *sql.Selector) {
		s.ForShare(opts...)
	})
	return grq
}

// GuildRoleGroupBy is the group-by builder for GuildRole entities.
type GuildRoleGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (grgb *GuildRoleGroupBy) Aggregate(fns ...AggregateFunc) *GuildRoleGroupBy {
	grgb.fns = append(grgb.fns, fns...)
	return grgb
}

// Scan applies the group-by query and scans the result into the given value.
func (grgb *GuildRoleGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := grgb.path(ctx)
	if err != nil {
		return err
	}
	grgb.sql = query
	return grgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (grgb *GuildRoleGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := grgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (grgb *GuildRoleGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(grgb.fields) > 1 {
		return nil, errors.New("ent: GuildRoleGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := grgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (grgb *GuildRoleGroupBy) StringsX(ctx context.Context) []string {
	v, err := grgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (grgb *GuildRoleGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = grgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{guildrole.Label}
	default:
		err = fmt.Errorf("ent: GuildRoleGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (grgb *GuildRoleGroupBy) StringX(ctx context.Context) string {
	v, err := grgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (grgb *GuildRoleGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(grgb.fields) > 1 {
		return nil, errors.New("ent: GuildRoleGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := grgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (grgb *GuildRoleGroupBy) IntsX(ctx context.Context) []int {
	v, err := grgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (grgb *GuildRoleGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = grgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{guildrole.Label}
	default:
		err = fmt.Errorf("ent: GuildRoleGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (grgb *GuildRoleGroupBy) IntX(ctx context.Context) int {
	v, err := grgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (grgb *GuildRoleGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(grgb.fields) > 1 {
		return nil, errors.New("ent: GuildRoleGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := grgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (grgb *GuildRoleGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := grgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (grgb *GuildRoleGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = grgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{guildrole.Label}
	default:
		err = fmt.Errorf("ent: GuildRoleGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (grgb *GuildRoleGroupBy) Float64X(ctx context.Context) float64 {
	v, err := grgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (grgb *GuildRoleGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(grgb.fields) > 1 {
		return nil, errors.New("ent: GuildRoleGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := grgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (grgb *GuildRoleGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := grgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (grgb *GuildRoleGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = grgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{guildrole.Label}
	default:
		err = fmt.Errorf("ent: GuildRoleGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (grgb *GuildRoleGroupBy) BoolX(ctx context.Context) bool {
	v, err := grgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (grgb *GuildRoleGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range grgb.fields {
		if !guildrole.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := grgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := grgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (grgb *GuildRoleGroupBy) sqlQuery() *sql.Selector {
	selector := grgb.sql.Select()
	aggregation := make([]string, 0, len(grgb.fns))
	for _, fn := range grgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(grgb.fields)+len(grgb.fns))
		for _, f := range grgb.fields {
			columns = append(columns, selector.C(f))
		}
		for _, c := range aggregation {
			columns = append(columns, c)
		}
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(grgb.fields...)...)
}

// GuildRoleSelect is the builder for selecting fields of GuildRole entities.
type GuildRoleSelect struct {
	*GuildRoleQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (grs *GuildRoleSelect) Scan(ctx context.Context, v interface{}) error {
	if err := grs.prepareQuery(ctx); err != nil {
		return err
	}
	grs.sql = grs.GuildRoleQuery.sqlQuery(ctx)
	return grs.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (grs *GuildRoleSelect) ScanX(ctx context.Context, v interface{}) {
	if err := grs.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (grs *GuildRoleSelect) Strings(ctx context.Context) ([]string, error) {
	if len(grs.fields) > 1 {
		return nil, errors.New("ent: GuildRoleSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := grs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (grs *GuildRoleSelect) StringsX(ctx context.Context) []string {
	v, err := grs.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (grs *GuildRoleSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = grs.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{guildrole.Label}
	default:
		err = fmt.Errorf("ent: GuildRoleSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (grs *GuildRoleSelect) StringX(ctx context.Context) string {
	v, err := grs.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (grs *GuildRoleSelect) Ints(ctx context.Context) ([]int, error) {
	if len(grs.fields) > 1 {
		return nil, errors.New("ent: GuildRoleSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := grs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (grs *GuildRoleSelect) IntsX(ctx context.Context) []int {
	v, err := grs.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (grs *GuildRoleSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = grs.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{guildrole.Label}
	default:
		err = fmt.Errorf("ent: GuildRoleSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (grs *GuildRoleSelect) IntX(ctx context.Context) int {
	v, err := grs.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (grs *GuildRoleSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(grs.fields) > 1 {
		return nil, errors.New("ent: GuildRoleSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := grs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (grs *GuildRoleSelect) Float64sX(ctx context.Context) []float64 {
	v, err := grs.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (grs *GuildRoleSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = grs.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{guildrole.Label}
	default:
		err = fmt.Errorf("ent: GuildRoleSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (grs *GuildRoleSelect) Float64X(ctx context.Context) float64 {
	v, err := grs.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (grs *GuildRoleSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(grs.fields) > 1 {
		return nil, errors.New("ent: GuildRoleSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := grs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (grs *GuildRoleSelect) BoolsX(ctx context.Context) []bool {
	v, err := grs.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (grs *GuildRoleSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = grs.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{guildrole.Label}
	default:
		err = fmt.Errorf("ent: GuildRoleSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (grs *GuildRoleSelect) BoolX(ctx context.Context) bool {
	v, err := grs.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (grs *GuildRoleSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := grs.sql.Query()
	if err := grs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
