// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/member-gentei/member-gentei/gentei/ent/predicate"
	"github.com/member-gentei/member-gentei/gentei/ent/youtubetalent"
)

// YouTubeTalentDelete is the builder for deleting a YouTubeTalent entity.
type YouTubeTalentDelete struct {
	config
	hooks    []Hook
	mutation *YouTubeTalentMutation
}

// Where appends a list predicates to the YouTubeTalentDelete builder.
func (yttd *YouTubeTalentDelete) Where(ps ...predicate.YouTubeTalent) *YouTubeTalentDelete {
	yttd.mutation.Where(ps...)
	return yttd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (yttd *YouTubeTalentDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, YouTubeTalentMutation](ctx, yttd.sqlExec, yttd.mutation, yttd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (yttd *YouTubeTalentDelete) ExecX(ctx context.Context) int {
	n, err := yttd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (yttd *YouTubeTalentDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(youtubetalent.Table, sqlgraph.NewFieldSpec(youtubetalent.FieldID, field.TypeString))
	if ps := yttd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, yttd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	yttd.mutation.done = true
	return affected, err
}

// YouTubeTalentDeleteOne is the builder for deleting a single YouTubeTalent entity.
type YouTubeTalentDeleteOne struct {
	yttd *YouTubeTalentDelete
}

// Where appends a list predicates to the YouTubeTalentDelete builder.
func (yttdo *YouTubeTalentDeleteOne) Where(ps ...predicate.YouTubeTalent) *YouTubeTalentDeleteOne {
	yttdo.yttd.mutation.Where(ps...)
	return yttdo
}

// Exec executes the deletion query.
func (yttdo *YouTubeTalentDeleteOne) Exec(ctx context.Context) error {
	n, err := yttdo.yttd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{youtubetalent.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (yttdo *YouTubeTalentDeleteOne) ExecX(ctx context.Context) {
	if err := yttdo.Exec(ctx); err != nil {
		panic(err)
	}
}
